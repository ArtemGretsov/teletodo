image: golang:1.17

stages:
  - test
  - build
  - deploy

lint:
  stage: test
  script:
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.45.2
    - golangci-lint run

test:
  stage: test
  services:
   - postgres:14.2
  variables:
    POSTGRES_DB: teletodo
    POSTGRES_USER: teletodo
    POSTGRES_PASSWORD: teletodo
    TELEGRAM_BOT_TOKEN: "token"
    DATABASE_DSN: host=postgres user=teletodo password=teletodo dbname=teletodo port=5432 sslmode=disable TimeZone=Europe/Moscow
  script:
   - ./scripts/wait-for.sh -t 60 postgres:5432
   - go run ./migrations/migrate.go up
   - go test -race ./...

build:
  image: docker:stable
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" -f build.Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  only:
    - main
    - develop

deploy:
  stage: deploy
  script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ./docker-compose.env.yml $DEPLOY_USER@$DEPLOY_HOST:/var/app/$CI_COMMIT_REF_SLUG/docker-compose.yml
    - ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $DEPLOY_USER@$DEPLOY_HOST "
      echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin &&
      cd /var/app/$CI_COMMIT_REF_SLUG &&
      docker-compose pull &&
      docker-compose stop app &&
      docker-compose up -d &&
      docker logout $CI_REGISTRY
      "
  only:
    - main
    - develop
